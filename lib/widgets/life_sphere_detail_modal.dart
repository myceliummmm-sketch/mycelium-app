import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import '../models/life_sphere.dart';
import '../theme/app_theme.dart';

class LifeSphereDetailModal extends StatelessWidget {
  final LifeSphere sphere;
  final double currentValue;

  const LifeSphereDetailModal({
    super.key,
    required this.sphere,
    required this.currentValue,
  });

  static void show(BuildContext context, LifeSphere sphere, double value) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => LifeSphereDetailModal(
        sphere: sphere,
        currentValue: value,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.65,
      decoration: const BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [Color(0xFF1A1F3A), AppColors.background],
        ),
        borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
      ),
      child: Column(
        children: [
          // Handle bar
          Container(
            margin: const EdgeInsets.only(top: 12, bottom: 8),
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),

          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(24),
              child: Column(
                children: [
                  // Emoji and title
                  Container(
                    width: 100,
                    height: 100,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: sphere.color.withOpacity(0.2),
                      border: Border.all(
                        color: sphere.color,
                        width: 3,
                      ),
                    ),
                    child: Center(
                      child: Text(
                        sphere.emoji,
                        style: const TextStyle(fontSize: 48),
                      ),
                    ),
                  )
                      .animate()
                      .scale(duration: 500.ms, curve: Curves.elasticOut),

                  const SizedBox(height: 24),

                  Text(
                    sphere.title,
                    style: AppTextStyles.h1,
                    textAlign: TextAlign.center,
                  ).animate(delay: 100.ms).fadeIn(),

                  const SizedBox(height: 24),

                  // Current value
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          sphere.color.withOpacity(0.3),
                          sphere.color.withOpacity(0.1),
                        ],
                      ),
                      borderRadius: BorderRadius.circular(16),
                      border: Border.all(
                        color: sphere.color.withOpacity(0.5),
                        width: 2,
                      ),
                    ),
                    child: Column(
                      children: [
                        const Text(
                          '–¢–µ–∫—É—â–∏–π –±–∞–ª–ª',
                          style: AppTextStyles.caption,
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '${currentValue.toInt()}/100',
                          style: AppTextStyles.h1.copyWith(
                            fontSize: 36,
                            color: sphere.color,
                          ),
                        ),
                        const SizedBox(height: 12),
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: LinearProgressIndicator(
                            value: currentValue / 100,
                            minHeight: 8,
                            backgroundColor: Colors.white.withOpacity(0.1),
                            valueColor: AlwaysStoppedAnimation(sphere.color),
                          ),
                        ),
                      ],
                    ),
                  ).animate(delay: 150.ms).fadeIn().scale(),

                  const SizedBox(height: 24),

                  // Tips to improve
                  Container(
                    padding: const EdgeInsets.all(20),
                    decoration: AppDecorations.cardBackground,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            const Text(
                              'üí°',
                              style: TextStyle(fontSize: 24),
                            ),
                            const SizedBox(width: 12),
                            Text(
                              '–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å',
                              style: AppTextStyles.h3,
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),
                        ..._getTipsForSphere(sphere.name)
                            .asMap()
                            .entries
                            .map((entry) {
                          return Padding(
                            padding: const EdgeInsets.only(bottom: 12),
                            child: Row(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Container(
                                  width: 24,
                                  height: 24,
                                  margin: const EdgeInsets.only(top: 2),
                                  decoration: BoxDecoration(
                                    color: sphere.color.withOpacity(0.2),
                                    shape: BoxShape.circle,
                                  ),
                                  child: Center(
                                    child: Text(
                                      '${entry.key + 1}',
                                      style: TextStyle(
                                        fontSize: 12,
                                        fontWeight: FontWeight.w700,
                                        color: sphere.color,
                                      ),
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Text(
                                    entry.value,
                                    style: AppTextStyles.body,
                                  ),
                                ),
                              ],
                            ),
                          );
                        }),
                      ],
                    ),
                  ).animate(delay: 200.ms).fadeIn().slideY(begin: 0.2, end: 0),

                  const SizedBox(height: 24),

                  // Action button
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);
                        // TODO: Navigate to training for this sphere
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: sphere.color,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      child: const Text(
                        '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w700,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ).animate(delay: 250.ms).fadeIn().slideY(begin: 0.2, end: 0),

                  const SizedBox(height: 20),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  List<String> _getTipsForSphere(String sphereName) {
    switch (sphereName) {
      case 'career':
        return [
          '–ü–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª',
          '–ü—Ä–æ—Å–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —É –∫–æ–ª–ª–µ–≥',
          '–†–∞–∑–≤–∏–≤–∞–π –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ',
          '–í—ã—Å—Ç—Ä–∞–∏–≤–∞–π —Å–≤—è–∑–∏ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ',
        ];
      case 'finance':
        return [
          '–í–µ–¥–∏ —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤',
          '–°–æ–∑–¥–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
          '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –≤ —Å–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
          '–ü–ª–∞–Ω–∏—Ä—É–π –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ',
        ];
      case 'health':
        return [
          '–°–ø–∏ –Ω–µ –º–µ–Ω–µ–µ 7-8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å',
          '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é',
          '–°–ª–µ–¥–∏ –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º –∏ –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º',
          '–ü—Ä–æ—Ö–æ–¥–∏ –µ–∂–µ–≥–æ–¥–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–º–æ—Ç—Ä—ã',
        ];
      case 'relationships':
        return [
          '–£–¥–µ–ª—è–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±–ª–∏–∑–∫–∏–º',
          '–ì–æ–≤–æ—Ä–∏ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –æ—Ç–∫—Ä—ã—Ç–æ',
          '–ù–∞—Ö–æ–¥–∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö',
          '–ü—Ä–∞–∫—Ç–∏–∫—É–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ',
        ];
      case 'development':
        return [
          '–ß–∏—Ç–∞–π –∫–Ω–∏–≥–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π',
          '–ü—Ä–æ–±—É–π –Ω–æ–≤—ã–µ —Ö–æ–±–±–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          '–†–µ—Ñ–ª–µ–∫—Å–∏—Ä—É–π –Ω–∞–¥ —Å–≤–æ–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏',
          '–û–±—â–∞–π—Å—è —Å –ª—é–¥—å–º–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ñ–µ—Ä',
        ];
      case 'social':
        return [
          '–ü–ª–∞–Ω–∏—Ä—É–π –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π',
          '–ù–∞—Ö–æ–¥–∏ —Ä–∞–¥–æ—Å—Ç—å –≤ –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–∞—Ö',
          '–ü—Ä–æ–±—É–π –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–∞',
          '–û–∫—Ä—É–∂–∞–π —Å–µ–±—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ –ª—é–¥—å–º–∏',
        ];
      case 'creativity':
        return [
          '–°–æ–∑–¥–∞–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–æ–º–∞',
          '–†–µ–≥—É–ª—è—Ä–Ω–æ —É–±–∏—Ä–∞–π—Å—è –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–π –≤–µ—â–∏',
          '–î–æ–±–∞–≤—å —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏',
          '–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã',
        ];
      case 'spirituality':
        return [
          '–ü—Ä–∞–∫—Ç–∏–∫—É–π –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å',
          '–ò–∑—É—á–∞–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é –∏ —Å–º—ã—Å–ª—ã –∂–∏–∑–Ω–∏',
          '–ü—Ä–æ–≤–æ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–µ–¥–∏–Ω–µ —Å —Å–æ–±–æ–π',
          '–ò—â–∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ –ø—Ä–∏—Ä–æ–¥–µ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ',
        ];
      default:
        return [
          '–£–¥–µ–ª—è–π —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ',
          '–°—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏',
          '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
          '–ü—Ä–∞–∑–¥–Ω—É–π –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã',
        ];
    }
  }
}
