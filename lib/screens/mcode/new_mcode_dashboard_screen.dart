import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:provider/provider.dart';
import '../../theme/app_theme.dart';
import '../../providers/user_profile_provider.dart';
import '10_spheres_assessment_screen.dart';

class NewMCodeDashboardScreen extends StatefulWidget {
  const NewMCodeDashboardScreen({super.key});

  @override
  State<NewMCodeDashboardScreen> createState() => _NewMCodeDashboardScreenState();
}

class _NewMCodeDashboardScreenState extends State<NewMCodeDashboardScreen> {
  bool _isProfileExpanded = false;
  bool _isLevel1Expanded = true; // –£—Ä–æ–≤–µ–Ω—å 1 —Ä–∞—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  final Map<int, bool> _levelExpanded = {
    2: false,
    3: false,
    4: false,
    5: false,
    6: false,
    7: false,
    8: false,
  };

  @override
  Widget build(BuildContext context) {
    final profile = context.watch<UserProfileProvider>().profile;

    return SafeArea(
      child: Scaffold(
        backgroundColor: AppColors.background,
        body: Column(
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Padding(
              padding: const EdgeInsets.all(24.0),
              child: Row(
                children: [
                  Text(
                    'üçÑ mCode',
                    style: AppTextStyles.h1.copyWith(fontSize: 28),
                  ),
                ],
              ),
            ),

            // –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.symmetric(horizontal: 24),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // –ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
                    _buildProfileCard(profile),

                    const SizedBox(height: 32),

                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–¢–≤–æ–π –ø—É—Ç—å —Ä–æ—Å—Ç–∞"
                    Text(
                      'üéØ –¢–í–û–ô –ü–£–¢–¨ –†–û–°–¢–ê',
                      style: AppTextStyles.h2.copyWith(fontSize: 20),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '–ü—Ä–æ—Ö–æ–¥–∏ —É—Ä–æ–≤–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É\n–û—Ç–∫—Ä—ã–≤–∞–π –Ω–æ–≤—ã–µ —Å—Ñ–µ—Ä—ã',
                      style: AppTextStyles.body.copyWith(
                        color: Colors.white60,
                      ),
                    ),

                    const SizedBox(height: 24),

                    // –£—Ä–æ–≤–µ–Ω—å 1 (–ê–∫—Ç–∏–≤–Ω—ã–π)
                    _buildLevel1(),

                    const SizedBox(height: 16),

                    // –£—Ä–æ–≤–Ω–∏ 2-8 (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)
                    ...List.generate(7, (index) {
                      final level = index + 2;
                      return Padding(
                        padding: const EdgeInsets.only(bottom: 16),
                        child: _buildLockedLevel(level),
                      );
                    }),

                    const SizedBox(height: 24),

                    // P2P —Å–µ–∫—Ü–∏—è
                    _buildP2PSection(),

                    const SizedBox(height: 100), // –û—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileCard(dynamic profile) {
    return GestureDetector(
      onTap: () {
        setState(() {
          _isProfileExpanded = !_isProfileExpanded;
        });
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              AppColors.primaryPurple.withOpacity(0.2),
              AppColors.accentBlue.withOpacity(0.2),
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: AppColors.primaryPurple.withOpacity(0.3),
            width: 1,
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
            Row(
              children: [
                Text(
                  'üë§',
                  style: const TextStyle(fontSize: 24),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '–°—Ç—Ä–∞—Ç–µ–≥-–í–∏–∑–∏–æ–Ω–µ—Ä',
                        style: AppTextStyles.h3,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '–£—Ä–æ–≤–µ–Ω—å 1 ‚Ä¢ 30/100 XP',
                        style: AppTextStyles.caption.copyWith(
                          color: Colors.white60,
                        ),
                      ),
                      Text(
                        'üíé 150 MYC',
                        style: AppTextStyles.caption.copyWith(
                          color: AppColors.accent,
                        ),
                      ),
                    ],
                  ),
                ),
                Icon(
                  _isProfileExpanded
                      ? Icons.keyboard_arrow_up
                      : Icons.keyboard_arrow_down,
                  color: Colors.white60,
                ),
              ],
            ),

            const SizedBox(height: 12),

            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: LinearProgressIndicator(
                value: 0.3,
                backgroundColor: Colors.white.withOpacity(0.1),
                valueColor: AlwaysStoppedAnimation<Color>(
                  AppColors.primaryPurple,
                ),
                minHeight: 8,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              '30%',
              style: AppTextStyles.caption.copyWith(
                color: Colors.white60,
              ),
            ),

            // –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –≤–µ—Ä—Å–∏—è
            if (_isProfileExpanded) ...[
              const SizedBox(height: 20),
              Divider(color: Colors.white.withOpacity(0.1)),
              const SizedBox(height: 16),

              Text(
                'üìä –ú–û–ô –ü–†–û–§–ò–õ–¨',
                style: AppTextStyles.h3,
              ),
              const SizedBox(height: 12),

              _buildProfileRow('üé≠ –¢–∏–ø:', '–°—Ç—Ä–∞—Ç–µ–≥-–í–∏–∑–∏–æ–Ω–µ—Ä'),
              _buildProfileRow('DISC:', 'D (–õ–∏–¥–µ—Ä)'),

              const SizedBox(height: 12),
              Text(
                'Big Five:',
                style: AppTextStyles.body.copyWith(
                  color: Colors.white70,
                  fontWeight: FontWeight.w600,
                ),
              ),
              _buildProfileRow('‚Ä¢ Openness:', 'High', indent: true),
              _buildProfileRow('‚Ä¢ Conscientiousness:', 'Medium', indent: true),
              _buildProfileRow('‚Ä¢ Extraversion:', 'High', indent: true),
              _buildProfileRow('‚Ä¢ Agreeableness:', 'Low', indent: true),
              _buildProfileRow('‚Ä¢ Neuroticism:', 'Low', indent: true),

              const SizedBox(height: 12),
              Text(
                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å—Ñ–µ—Ä—ã:',
                style: AppTextStyles.body.copyWith(
                  color: Colors.white70,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                'üí∞ –î–µ–Ω—å–≥–∏ ‚Ä¢ üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è ‚Ä¢ üéØ –¶–µ–ª–∏',
                style: AppTextStyles.body.copyWith(
                  color: AppColors.accent,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildProfileRow(String label, String value, {bool indent = false}) {
    return Padding(
      padding: EdgeInsets.only(left: indent ? 12 : 0, bottom: 4),
      child: Row(
        children: [
          Text(
            label,
            style: AppTextStyles.caption.copyWith(
              color: Colors.white60,
            ),
          ),
          const SizedBox(width: 8),
          Text(
            value,
            style: AppTextStyles.caption.copyWith(
              color: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLevel1() {
    return GestureDetector(
      onTap: () {
        setState(() {
          _isLevel1Expanded = !_isLevel1Expanded;
        });
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.05),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: AppColors.primaryPurple.withOpacity(0.3),
            width: 2,
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è
            Row(
              children: [
                Icon(
                  _isLevel1Expanded
                      ? Icons.keyboard_arrow_down
                      : Icons.keyboard_arrow_right,
                  color: AppColors.primaryPurple,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '–£–†–û–í–ï–ù–¨ 1 ‚Ä¢ –ê–ö–¢–ò–í–ï–ù',
                    style: AppTextStyles.h3.copyWith(
                      color: AppColors.primaryPurple,
                    ),
                  ),
                ),
              ],
            ),

            if (_isLevel1Expanded) ...[
              const SizedBox(height: 20),

              // –°—Ñ–µ—Ä–∞
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: AppColors.primaryPurple.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  children: [
                    Text('üí∞', style: const TextStyle(fontSize: 24)),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–î–ï–ù–¨–ì–ò',
                            style: AppTextStyles.h3.copyWith(fontSize: 16),
                          ),
                          Text(
                            '(–æ—Ü–µ–Ω–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–∞—á–∏ ‚Ññ4)',
                            style: AppTextStyles.caption.copyWith(
                              color: Colors.white60,
                            ),
                          ),
                        ],
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: AppColors.success.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
                        style: AppTextStyles.caption.copyWith(
                          color: AppColors.success,
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // –ó–∞–¥–∞—á–∏
              Text(
                'üìã –¢–í–û–ò –ó–ê–î–ê–ß–ò:',
                style: AppTextStyles.h3,
              ),
              const SizedBox(height: 16),

              // –ó–∞–¥–∞—á–∞ 1 - –ó–∞–≤–µ—Ä—à–µ–Ω–∞
              _buildTask(
                icon: '‚úÖ',
                title: '–£–∑–Ω–∞—Ç—å —Å–≤–æ–π DISC —Ç–∏–ø',
                subtitle: '–ì–æ—Ç–æ–≤–æ! +10 XP',
                isCompleted: true,
              ),

              const SizedBox(height: 12),

              // –ó–∞–¥–∞—á–∞ 2 - –ó–∞–≤–µ—Ä—à–µ–Ω–∞
              _buildTask(
                icon: '‚úÖ',
                title: '–ü—Ä–æ–π—Ç–∏ Big Five —Ç–µ—Å—Ç',
                subtitle: '–ì–æ—Ç–æ–≤–æ! +10 XP',
                isCompleted: true,
              ),

              const SizedBox(height: 12),

              // –ó–∞–¥–∞—á–∞ 3 - –ó–∞–≤–µ—Ä—à–µ–Ω–∞
              _buildTask(
                icon: '‚úÖ',
                title: '–í—ã–±—Ä–∞—Ç—å 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞',
                subtitle: '–ì–æ—Ç–æ–≤–æ! +10 XP',
                isCompleted: true,
              ),

              const SizedBox(height: 12),

              // –ó–∞–¥–∞—á–∞ 4 - –ê–∫—Ç–∏–≤–Ω–∞—è
              _buildTask(
                icon: '‚¨ú',
                title: '–û—Ü–µ–Ω–∏—Ç—å 8 —Å—Ñ–µ—Ä –±–∞–ª–∞–Ω—Å–∞',
                subtitle: '–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞! +70 XP',
                isCompleted: false,
                onTap: () {
                  Navigator.of(context).push(
                    MaterialPageRoute(
                      builder: (_) => const SpheresAssessmentNewScreen(),
                    ),
                  );
                },
              ),

              const SizedBox(height: 16),

              // –ü–æ–¥—Å–∫–∞–∑–∫–∞
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: AppColors.info.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: AppColors.info.withOpacity(0.3),
                    width: 1,
                  ),
                ),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('üí°', style: const TextStyle(fontSize: 20)),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–ü–æ–¥—Å–∫–∞–∑–∫–∞:',
                            style: AppTextStyles.body.copyWith(
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            '–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏ –æ—Ç 0 –¥–æ 10\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
                            style: AppTextStyles.caption.copyWith(
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              Divider(color: Colors.white.withOpacity(0.1)),

              const SizedBox(height: 16),

              // –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è
              Text(
                '–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è: 30/100 XP',
                style: AppTextStyles.body.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: LinearProgressIndicator(
                  value: 0.3,
                  backgroundColor: Colors.white.withOpacity(0.1),
                  valueColor: AlwaysStoppedAnimation<Color>(
                    AppColors.primaryPurple,
                  ),
                  minHeight: 8,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                '30%',
                style: AppTextStyles.caption.copyWith(
                  color: Colors.white60,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildTask({
    required String icon,
    required String title,
    required String subtitle,
    required bool isCompleted,
    VoidCallback? onTap,
  }) {
    return GestureDetector(
      onTap: isCompleted ? null : onTap,
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: isCompleted
              ? Colors.white.withOpacity(0.03)
              : AppColors.primaryPurple.withOpacity(0.1),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isCompleted
                ? Colors.white.withOpacity(0.1)
                : AppColors.primaryPurple.withOpacity(0.3),
            width: 1,
          ),
        ),
        child: Row(
          children: [
            Text(icon, style: const TextStyle(fontSize: 24)),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: AppTextStyles.body.copyWith(
                      fontWeight: FontWeight.w600,
                      color: isCompleted ? Colors.white60 : Colors.white,
                    ),
                  ),
                  const SizedBox(height: 2),
                  Text(
                    subtitle,
                    style: AppTextStyles.caption.copyWith(
                      color: isCompleted
                          ? Colors.white.withOpacity(0.4)
                          : AppColors.accent,
                    ),
                  ),
                ],
              ),
            ),
            if (!isCompleted)
              const Icon(
                Icons.arrow_forward_ios,
                size: 16,
                color: AppColors.primaryPurple,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildLockedLevel(int level) {
    final isExpanded = _levelExpanded[level] ?? false;
    final levelData = _getLevelData(level);

    return GestureDetector(
      onTap: () {
        setState(() {
          _levelExpanded[level] = !isExpanded;
        });
      },
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 300),
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.03),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(
            color: Colors.white.withOpacity(0.1),
            width: 1,
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Row(
              children: [
                Icon(
                  isExpanded
                      ? Icons.keyboard_arrow_down
                      : Icons.keyboard_arrow_right,
                  color: Colors.white60,
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '–£–†–û–í–ï–ù–¨ $level ‚Ä¢ üîí –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù',
                    style: AppTextStyles.h3.copyWith(
                      color: Colors.white60,
                    ),
                  ),
                ),
              ],
            ),

            const SizedBox(height: 12),

            // –£—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            Text(
              '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏:',
              style: AppTextStyles.caption.copyWith(
                color: Colors.white60,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              '‚Ä¢ ${levelData['xpRequired']} XP (—Å–µ–π—á–∞—Å: 30/${levelData['xpRequired']})',
              style: AppTextStyles.caption.copyWith(
                color: Colors.white.withOpacity(0.4),
              ),
            ),
            Text(
              '‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –£—Ä–æ–≤–Ω—è ${level - 1}',
              style: AppTextStyles.caption.copyWith(
                color: Colors.white.withOpacity(0.4),
              ),
            ),

            if (isExpanded) ...[
              const SizedBox(height: 16),
              Divider(color: Colors.white.withOpacity(0.1)),
              const SizedBox(height: 16),

              // –ü—Ä–µ–≤—å—é —Å—Ñ–µ—Ä—ã
              Row(
                children: [
                  Text(levelData['emoji'], style: const TextStyle(fontSize: 24)),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '${levelData['sphere']} - ?/10',
                          style: AppTextStyles.body.copyWith(
                            fontWeight: FontWeight.w600,
                            color: Colors.white60,
                          ),
                        ),
                        Text(
                          'üîí Locked',
                          style: AppTextStyles.caption.copyWith(
                            color: Colors.white.withOpacity(0.4),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 16),

              // –ß—Ç–æ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏
              Text(
                '–ß—Ç–æ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏:',
                style: AppTextStyles.body.copyWith(
                  fontWeight: FontWeight.w600,
                  color: Colors.white60,
                ),
              ),
              const SizedBox(height: 12),

              Text(
                'üìã –ó–ê–î–ê–ß–ò:',
                style: AppTextStyles.caption.copyWith(
                  color: Colors.white60,
                ),
              ),
              const SizedBox(height: 8),

              ...List.generate(levelData['tasks'].length, (index) {
                return Padding(
                  padding: const EdgeInsets.only(bottom: 6),
                  child: Text(
                    '‚¨ú ${levelData['tasks'][index]}',
                    style: AppTextStyles.caption.copyWith(
                      color: Colors.white.withOpacity(0.4),
                    ),
                  ),
                );
              }),

              const SizedBox(height: 12),

              // –ü—Ä–æ–≥—Ä–µ—Å—Å
              Text(
                '–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/${levelData['xpRequired']} XP',
                style: AppTextStyles.caption.copyWith(
                  color: Colors.white60,
                ),
              ),
              const SizedBox(height: 8),
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: LinearProgressIndicator(
                  value: 0,
                  backgroundColor: Colors.white.withOpacity(0.1),
                  valueColor: AlwaysStoppedAnimation<Color>(
                    Colors.white.withOpacity(0.2),
                  ),
                  minHeight: 6,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                '0%',
                style: AppTextStyles.caption.copyWith(
                  color: Colors.white.withOpacity(0.4),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Map<String, dynamic> _getLevelData(int level) {
    final data = {
      2: {
        'emoji': 'üíï',
        'sphere': '–û–¢–ù–û–®–ï–ù–ò–Ø',
        'xpRequired': 150,
        'tasks': [
          '–¢–µ—Å—Ç "–≠–º–ø–∞—Ç–∏—è"',
          '–¢–µ—Å—Ç "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"',
          '–¢–µ—Å—Ç "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
      3: {
        'emoji': 'üéØ',
        'sphere': '–¶–ï–õ–ò',
        'xpRequired': 200,
        'tasks': [
          '–¢–µ—Å—Ç "–ú–æ—Ç–∏–≤–∞—Ü–∏—è"',
          '–¢–µ—Å—Ç "–§–æ–∫—É—Å"',
          '–¢–µ—Å—Ç "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
      4: {
        'emoji': 'üè•',
        'sphere': '–ó–î–û–†–û–í–¨–ï',
        'xpRequired': 250,
        'tasks': [
          '–¢–µ—Å—Ç "–≠–Ω–µ—Ä–≥–∏—è"',
          '–¢–µ—Å—Ç "–ü—Ä–∏–≤—ã—á–∫–∏"',
          '–¢–µ—Å—Ç "–°—Ç—Ä–µ—Å—Å"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
      5: {
        'emoji': 'üß†',
        'sphere': '–ü–°–ò–•–û–õ–û–ì–ò–Ø',
        'xpRequired': 300,
        'tasks': [
          '–¢–µ—Å—Ç "–≠–º–æ—Ü–∏–∏"',
          '–¢–µ—Å—Ç "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å"',
          '–¢–µ—Å—Ç "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
      6: {
        'emoji': 'üìà',
        'sphere': '–†–ê–ó–í–ò–¢–ò–ï',
        'xpRequired': 350,
        'tasks': [
          '–¢–µ—Å—Ç "–û–±—É—á–∞–µ–º–æ—Å—Ç—å"',
          '–¢–µ—Å—Ç "–ù–∞–≤—ã–∫–∏"',
          '–¢–µ—Å—Ç "–ó–Ω–∞–Ω–∏—è"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
      7: {
        'emoji': 'üé®',
        'sphere': '–¢–í–û–†–ß–ï–°–¢–í–û',
        'xpRequired': 400,
        'tasks': [
          '–¢–µ—Å—Ç "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"',
          '–¢–µ—Å—Ç "–°–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ"',
          '–¢–µ—Å—Ç "–•–æ–±–±–∏"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
      8: {
        'emoji': 'üîÆ',
        'sphere': '–°–ú–´–°–õ',
        'xpRequired': 450,
        'tasks': [
          '–¢–µ—Å—Ç "–¶–µ–Ω–Ω–æ—Å—Ç–∏"',
          '–¢–µ—Å—Ç "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å"',
          '–¢–µ—Å—Ç "–¶–µ–ª—å –∂–∏–∑–Ω–∏"',
          '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å',
        ],
      },
    };

    return data[level]!;
  }

  Widget _buildP2PSection() {
    return Container(
      padding: const EdgeInsets.all(24),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.05),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: AppColors.accentOrange.withOpacity(0.3),
          width: 2,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üéÆ P2P –¢–†–ï–ù–ò–†–û–í–ö–ò',
            style: AppTextStyles.h2.copyWith(fontSize: 20),
          ),
          const SizedBox(height: 12),

          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: AppColors.accentOrange.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Row(
              children: [
                const Icon(
                  Icons.lock,
                  color: AppColors.accentOrange,
                  size: 20,
                ),
                const SizedBox(width: 8),
                Text(
                  '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ 5',
                  style: AppTextStyles.body.copyWith(
                    color: AppColors.accentOrange,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(height: 16),

          Text(
            '–ñ–∏–≤–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ª—é–¥—å–º–∏\n–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã –¥–ª—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π\nAI-–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏',
            style: AppTextStyles.body.copyWith(
              color: Colors.white60,
            ),
          ),

          const SizedBox(height: 16),

          Text(
            '–¢–≤–æ–π –ø—É—Ç—å:',
            style: AppTextStyles.caption.copyWith(
              color: Colors.white60,
            ),
          ),
          const SizedBox(height: 8),
          ClipRRect(
            borderRadius: BorderRadius.circular(8),
            child: LinearProgressIndicator(
              value: 0.2,
              backgroundColor: Colors.white.withOpacity(0.1),
              valueColor: AlwaysStoppedAnimation<Color>(
                AppColors.accentOrange,
              ),
              minHeight: 8,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            '1/5',
            style: AppTextStyles.caption.copyWith(
              color: Colors.white60,
            ),
          ),

          const SizedBox(height: 16),

          Text(
            '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:',
            style: AppTextStyles.body.copyWith(
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),

          _buildChecklistItem('‚òê –î–æ—Å—Ç–∏—á—å —É—Ä–æ–≤–Ω—è 5 (400+ XP)', false),
          _buildChecklistItem('‚òê –ü—Ä–æ–π—Ç–∏ –≤—Å–µ 5 —É—Ä–æ–≤–Ω–µ–π', false),
          _buildChecklistItem('‚òê Trust Score –º–∏–Ω–∏–º—É–º 50', false),

          const SizedBox(height: 16),

          SizedBox(
            width: double.infinity,
            height: 48,
            child: ElevatedButton(
              onPressed: () {
                // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –æ P2P
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.accentOrange.withOpacity(0.2),
                foregroundColor: AppColors.accentOrange,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                elevation: 0,
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
                    style: AppTextStyles.body.copyWith(
                      color: AppColors.accentOrange,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(width: 8),
                  const Icon(Icons.arrow_forward, size: 18),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildChecklistItem(String text, bool isCompleted) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 6),
      child: Text(
        text,
        style: AppTextStyles.caption.copyWith(
          color: isCompleted ? AppColors.success : Colors.white60,
        ),
      ),
    );
  }
}
