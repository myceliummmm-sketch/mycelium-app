import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import '../theme/app_theme.dart';
import '../models/activity_model.dart';

class AIScreen extends StatelessWidget {
  const AIScreen({super.key});

  final List<ActivityModel> _activities = const [
    ActivityModel(
      id: '1',
      type: ActivityType.testCompleted,
      title: '–ó–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Å—Ç Big Five',
      description: '–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –Ω–∞ –±–æ–ª—å—à—É—é –ø—è—Ç–µ—Ä–∫—É –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö —á–µ—Ä—Ç',
      aiComment:
          '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –≤—ã—Å–æ–∫–∞—è –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É (87%) –æ—Ç–ª–∏—á–Ω–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å —Ä–∞–∑–≤–∏—Ç—ã–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –º—ã—à–ª–µ–Ω–∏–µ–º. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞.',
      timestamp: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
      emoji: '‚≠ê',
      metadata: {
        'tokens': 75,
        'metaskills': ['–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ', '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å']
      },
    ),
    ActivityModel(
      id: '2',
      type: ActivityType.p2pCall,
      title: '–†—É–ª–µ—Ç–∫–∞ —Å –ê–Ω–Ω–æ–π –ö.',
      description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π',
      aiComment:
          '–ó–∞–º–µ—Ç–∏–ª —è—Ä–∫—É—é —Å–∏–Ω–µ—Ä–≥–∏—é! –£ –≤–∞—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –º–µ—Ç–∞—Å–∫–∏–ª–∞–º "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å" –∏ "–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ". –ê–Ω–Ω–∞ —Ç–æ–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º. –í—ã –æ–±–º–µ–Ω—è–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ - –æ—Ç–ª–∏—á–Ω—ã–π –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥!',
      timestamp: '5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥',
      emoji: 'üé≤',
      metadata: {'duration': '23 –º–∏–Ω', 'rating': 5},
    ),
    ActivityModel(
      id: '3',
      type: ActivityType.levelUp,
      title: '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!',
      description: '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ 8 —É—Ä–æ–≤–Ω—è',
      aiComment:
          '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å 8 —É—Ä–æ–≤–Ω–µ–º! –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –∑–∞–º–µ—Ç–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–∞—Å–∫–∏–ª–∞—Ö (+15%). –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –∏ –∫ –∫–æ–Ω—Ü—É –º–µ—Å—è—Ü–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º —Ç–µ—Å—Ç–∞–º.',
      timestamp: '–≤—á–µ—Ä–∞',
      emoji: 'üéâ',
      metadata: {'level': 8, 'nextLevelProgress': 0.45},
    ),
    ActivityModel(
      id: '4',
      type: ActivityType.testCompleted,
      title: '–ó–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Å—Ç –Ω–∞ —ç–º–ø–∞—Ç–∏—é',
      description: '–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è',
      aiComment:
          '–í–∞—à —É—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏ 78% - —ç—Ç–æ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ! –≠—Ç–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏. –õ—é–¥–∏ —Å –ø–æ—Ö–æ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º —á–∞—Å—Ç–æ —É—Å–ø–µ—à–Ω—ã –≤ HR –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.',
      timestamp: '–≤—á–µ—Ä–∞',
      emoji: '‚ù§Ô∏è',
      metadata: {'tokens': 40, 'score': 78},
    ),
    ActivityModel(
      id: '5',
      type: ActivityType.p2pCall,
      title: '–†—É–ª–µ—Ç–∫–∞ —Å –î–º–∏—Ç—Ä–∏–µ–º –°.',
      description: '–†–∞–∑–≥–æ–≤–æ—Ä –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ',
      aiComment:
          '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –±–µ—Å–µ–¥–∞! –î–º–∏—Ç—Ä–∏–π –ø–æ–∫–∞–∑–∞–ª –≤—ã—Å–æ–∫—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –≤ –æ–±–ª–∞—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í—ã –æ–±–∞ –Ω–∞–±—Ä–∞–ª–∏ –≤—ã—Å–æ–∫–∏–µ –±–∞–ª–ª—ã –ø–æ "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é" - –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º.',
      timestamp: '2 –¥–Ω—è –Ω–∞–∑–∞–¥',
      emoji: 'üé≤',
      metadata: {'duration': '18 –º–∏–Ω', 'rating': 4},
    ),
    ActivityModel(
      id: '6',
      type: ActivityType.achievement,
      title: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
      description: '–ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
      aiComment:
          '–û—Ç–ª–∏—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å! 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–≤—ã—à–∞—é—Ç –≤–∞—à –º–µ—Ç–∞—Å–∫–∏–ª "–ú–æ—Ç–∏–≤–∞—Ü–∏—è". –¢–∞–∫–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É —Ä–æ—Å—Ç—É.',
      timestamp: '2 –¥–Ω—è –Ω–∞–∑–∞–¥',
      emoji: 'üèÜ',
      metadata: {'streak': 7},
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [AppColors.background, Color(0xFF1A1F3A)],
          ),
        ),
        child: SafeArea(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Padding(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'AI –§–∏–¥–±—ç–∫',
                      style: AppTextStyles.h1,
                    ).animate().fadeIn().slideX(begin: -0.2, end: 0),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Container(
                          width: 8,
                          height: 8,
                          decoration: const BoxDecoration(
                            gradient: AppGradients.primaryGradient,
                            shape: BoxShape.circle,
                          ),
                        )
                            .animate(onPlay: (controller) => controller.repeat())
                            .fadeIn(duration: 1000.ms)
                            .fadeOut(duration: 1000.ms),
                        const SizedBox(width: 8),
                        const Text(
                          '–ö–æ–º–∞–Ω–¥–∞ AI Mycelium —Å–ª–µ–¥–∏—Ç –∑–∞ –≤–∞—à–∏–º —Ä–æ—Å—Ç–æ–º',
                          style: AppTextStyles.bodySecondary,
                        ),
                      ],
                    ).animate().fadeIn(delay: 100.ms),
                  ],
                ),
              ),

              // Activity feed
              Expanded(
                child: ListView.builder(
                  padding: const EdgeInsets.symmetric(horizontal: 20),
                  itemCount: _activities.length,
                  itemBuilder: (context, index) {
                    return _buildActivityCard(
                      context,
                      activity: _activities[index],
                      delay: index * 100,
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildActivityCard(
    BuildContext context, {
    required ActivityModel activity,
    required int delay,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: AppDecorations.cardBackground,
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Row(
              children: [
                if (activity.emoji != null)
                  Container(
                    width: 50,
                    height: 50,
                    decoration: BoxDecoration(
                      gradient: _getGradientForType(activity.type),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Center(
                      child: Text(
                        activity.emoji!,
                        style: const TextStyle(fontSize: 24),
                      ),
                    ),
                  ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        activity.title,
                        style: AppTextStyles.h3,
                      ),
                      const SizedBox(height: 2),
                      Text(
                        activity.timestamp,
                        style: AppTextStyles.caption,
                      ),
                    ],
                  ),
                ),
              ],
            ),

            const SizedBox(height: 12),

            // Activity description
            Text(
              activity.description,
              style: AppTextStyles.body,
            ),

            // Metadata badges
            if (activity.metadata != null) ...[
              const SizedBox(height: 12),
              Wrap(
                spacing: 8,
                runSpacing: 8,
                children: _buildMetadataBadges(activity.metadata!),
              ),
            ],

            const SizedBox(height: 16),

            // AI Comment section
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    AppColors.primaryPurple.withOpacity(0.1),
                    AppColors.primaryBlue.withOpacity(0.1),
                  ],
                ),
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: AppColors.primaryPurple.withOpacity(0.3),
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Container(
                        width: 24,
                        height: 24,
                        decoration: const BoxDecoration(
                          gradient: AppGradients.primaryGradient,
                          shape: BoxShape.circle,
                        ),
                        child: const Icon(
                          Icons.psychology,
                          color: Colors.white,
                          size: 14,
                        ),
                      ),
                      const SizedBox(width: 8),
                      const Text(
                        'AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
                        style: TextStyle(
                          fontSize: 12,
                          fontWeight: FontWeight.w700,
                          color: AppColors.primaryPurple,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    activity.aiComment,
                    style: AppTextStyles.body.copyWith(
                      color: AppColors.textPrimary,
                      height: 1.5,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    )
        .animate()
        .fadeIn(delay: Duration(milliseconds: delay))
        .slideY(begin: 0.1, end: 0);
  }

  List<Widget> _buildMetadataBadges(Map<String, dynamic> metadata) {
    List<Widget> badges = [];

    if (metadata.containsKey('tokens')) {
      badges.add(
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          decoration: BoxDecoration(
            color: AppColors.warning.withOpacity(0.2),
            borderRadius: BorderRadius.circular(6),
            border: Border.all(
              color: AppColors.warning.withOpacity(0.3),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.token, size: 12, color: AppColors.warning),
              const SizedBox(width: 4),
              Text(
                '+${metadata['tokens']} MYC',
                style: AppTextStyles.caption.copyWith(
                  color: AppColors.warning,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (metadata.containsKey('duration')) {
      badges.add(
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          decoration: BoxDecoration(
            color: AppColors.primaryBlue.withOpacity(0.2),
            borderRadius: BorderRadius.circular(6),
            border: Border.all(
              color: AppColors.primaryBlue.withOpacity(0.3),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.timer, size: 12, color: AppColors.primaryBlue),
              const SizedBox(width: 4),
              Text(
                metadata['duration'],
                style: AppTextStyles.caption.copyWith(
                  color: AppColors.primaryBlue,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (metadata.containsKey('rating')) {
      badges.add(
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          decoration: BoxDecoration(
            color: AppColors.success.withOpacity(0.2),
            borderRadius: BorderRadius.circular(6),
            border: Border.all(
              color: AppColors.success.withOpacity(0.3),
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.star, size: 12, color: AppColors.success),
              const SizedBox(width: 4),
              Text(
                '${metadata['rating']}/5',
                style: AppTextStyles.caption.copyWith(
                  color: AppColors.success,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (metadata.containsKey('level')) {
      badges.add(
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          decoration: BoxDecoration(
            gradient: AppGradients.primaryGradient,
            borderRadius: BorderRadius.circular(6),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Icon(Icons.arrow_upward, size: 12, color: Colors.white),
              const SizedBox(width: 4),
              Text(
                '–£—Ä–æ–≤–µ–Ω—å ${metadata['level']}',
                style: AppTextStyles.caption.copyWith(
                  color: Colors.white,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (metadata.containsKey('streak')) {
      badges.add(
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          decoration: BoxDecoration(
            gradient: AppGradients.warningGradient,
            borderRadius: BorderRadius.circular(6),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text('üî•', style: TextStyle(fontSize: 12)),
              const SizedBox(width: 4),
              Text(
                '${metadata['streak']} –¥–Ω–µ–π',
                style: AppTextStyles.caption.copyWith(
                  color: Colors.white,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (metadata.containsKey('metaskills')) {
      final metaskills = metadata['metaskills'] as List;
      for (var skill in metaskills) {
        badges.add(
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
            decoration: BoxDecoration(
              color: AppColors.primaryPurple.withOpacity(0.2),
              borderRadius: BorderRadius.circular(6),
              border: Border.all(
                color: AppColors.primaryPurple.withOpacity(0.3),
              ),
            ),
            child: Text(
              skill,
              style: AppTextStyles.caption.copyWith(
                color: AppColors.primaryPurple,
                fontWeight: FontWeight.w700,
              ),
            ),
          ),
        );
      }
    }

    if (metadata.containsKey('score')) {
      badges.add(
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
          decoration: BoxDecoration(
            color: AppColors.success.withOpacity(0.2),
            borderRadius: BorderRadius.circular(6),
            border: Border.all(
              color: AppColors.success.withOpacity(0.3),
            ),
          ),
          child: Text(
            '${metadata['score']}%',
            style: AppTextStyles.caption.copyWith(
              color: AppColors.success,
              fontWeight: FontWeight.w700,
            ),
          ),
        ),
      );
    }

    return badges;
  }

  Gradient _getGradientForType(ActivityType type) {
    switch (type) {
      case ActivityType.testCompleted:
        return AppGradients.purpleGradient;
      case ActivityType.p2pCall:
        return AppGradients.primaryGradient;
      case ActivityType.levelUp:
        return AppGradients.successGradient;
      case ActivityType.achievement:
        return AppGradients.yellowGradient;
    }
  }
}
