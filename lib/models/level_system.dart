import 'dart:math' as math;

enum LevelTier {
  spore('–°–ø–æ—Ä–∞', 'üå∞', 1, 10, 0),
  hypha('–ì–∏—Ñ–∞', 'üå±', 11, 25, 100),
  primaryMycelium('–ü–µ—Ä–≤–∏—á–Ω—ã–π –º–∏—Ü–µ–ª–∏–π', 'üï∏Ô∏è', 26, 50, 500),
  fruitingBody('–ü–ª–æ–¥–æ–≤–æ–µ —Ç–µ–ª–æ', 'üçÑ', 51, 75, 2000),
  symbiont('–°–∏–º–±–∏–æ–Ω—Ç', 'üå≥', 76, 90, 5000),
  motherMycelium('–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –≥—Ä–∏–±–Ω–∏—Ü–∞', '‚ú®', 91, 100, 10000);

  final String title;
  final String emoji;
  final int minLevel;
  final int maxLevel;
  final int xpRequired;

  const LevelTier(
    this.title,
    this.emoji,
    this.minLevel,
    this.maxLevel,
    this.xpRequired,
  );

  static LevelTier fromLevel(int level) {
    if (level <= 10) return LevelTier.spore;
    if (level <= 25) return LevelTier.hypha;
    if (level <= 50) return LevelTier.primaryMycelium;
    if (level <= 75) return LevelTier.fruitingBody;
    if (level <= 90) return LevelTier.symbiont;
    return LevelTier.motherMycelium;
  }

  List<String> get privileges {
    switch (this) {
      case LevelTier.spore:
        return ['–ë–∞–∑–æ–≤—ã–π –º–∞—Ç—á–∏–Ω–≥', '3 —Å–µ—Å—Å–∏–∏/–Ω–µ–¥–µ–ª—é'];
      case LevelTier.hypha:
        return ['5 —Å–µ—Å—Å–∏–π/–Ω–µ–¥–µ–ª—é', '50% —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤'];
      case LevelTier.primaryMycelium:
        return ['10 —Å–µ—Å—Å–∏–π/–Ω–µ–¥–µ–ª—é', '75% —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –º–∞—Ç—á–∏–Ω–≥–µ'];
      case LevelTier.fruitingBody:
        return [
          '–ë–µ–∑–ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π',
          '–í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
          '–ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–º',
          '2x MYC –∑–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ'
        ];
      case LevelTier.symbiont:
        return [
          '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
          '–ú–æ–¥–µ—Ä–∞—Ü–∏—è',
          '3x MYC –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        ];
      case LevelTier.motherMycelium:
        return [
          '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
          '–£—á–∞—Å—Ç–∏–µ –≤ governance',
          '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
        ];
    }
  }
}

class UserLevel {
  final int currentLevel;
  final int currentXP;
  final int xpToNextLevel;
  final double progress;
  final LevelTier tier;

  UserLevel({
    required this.currentLevel,
    required this.currentXP,
    required this.xpToNextLevel,
    required this.progress,
    required this.tier,
  });

  factory UserLevel.fromXP(int xp) {
    final level = _calculateLevel(xp);
    final tier = LevelTier.fromLevel(level);
    final xpToNext = _calculateXPForNextLevel(level);
    final currentLevelXP = _calculateXPForLevel(level);
    final progress = (xp - currentLevelXP) / (xpToNext - currentLevelXP);

    return UserLevel(
      currentLevel: level,
      currentXP: xp,
      xpToNextLevel: xpToNext,
      progress: progress.clamp(0.0, 1.0),
      tier: tier,
    );
  }

  static int _calculateLevel(int xp) {
    // Simple formula: level = sqrt(xp / 100) + 1
    return math.sqrt(xp / 100).floor() + 1;
  }

  static int _calculateXPForLevel(int level) {
    return ((level - 1) * (level - 1) * 100).toInt();
  }

  static int _calculateXPForNextLevel(int level) {
    return (level * level * 100).toInt();
  }
}

// XP –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
class XPReward {
  static const int sessionCompleted = 10;
  static const int highRating = 5;
  static const int mentorSession = 20;
  static const int goalAchieved = 50;
  static const int friendInvited = 30;
}
