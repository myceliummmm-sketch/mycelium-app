import 'package:flutter/material.dart';

enum LifeSphere {
  career('–ö–∞—Ä—å–µ—Ä–∞', 'üíº', Color(0xFF6366F1)),
  relationships('–û—Ç–Ω–æ—à–µ–Ω–∏—è', '‚ù§Ô∏è', Color(0xFFEC4899)),
  finance('–§–∏–Ω–∞–Ω—Å—ã', 'üí∞', Color(0xFF10B981)),
  health('–ó–¥–æ—Ä–æ–≤—å–µ', 'üèÉ', Color(0xFFF59E0B)),
  creativity('–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', 'üé®', Color(0xFF8B5CF6)),
  development('–†–∞–∑–≤–∏—Ç–∏–µ', 'üìö', Color(0xFF3B82F6)),
  social('–°–æ—Ü–∏—É–º', 'üë•', Color(0xFF14B8A6)),
  spirituality('–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å', 'üßò', Color(0xFFA855F7));

  final String title;
  final String emoji;
  final Color color;

  const LifeSphere(this.title, this.emoji, this.color);
}

class LifeSphereData {
  final LifeSphere sphere;
  final int value; // 0-100
  final double change; // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π

  LifeSphereData({
    required this.sphere,
    required this.value,
    this.change = 0.0,
  });

  Color get statusColor {
    if (value >= 61) return const Color(0xFF10B981); // green
    if (value >= 31) return const Color(0xFFF59E0B); // yellow
    return const Color(0xFFEF4444); // red
  }

  String get statusText {
    if (value >= 61) return '–û—Ç–ª–∏—á–Ω–æ';
    if (value >= 31) return '–•–æ—Ä–æ—à–æ';
    return '–ù—É–∂–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ';
  }

  LifeSphereData copyWith({
    int? value,
    double? change,
  }) {
    return LifeSphereData(
      sphere: sphere,
      value: value ?? this.value,
      change: change ?? this.change,
    );
  }
}

class LifeWheelBalance {
  final List<LifeSphereData> spheres;
  final double averageBalance; // —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
  final double harmony; // –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ—Å—Ç—å (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)

  LifeWheelBalance({
    required this.spheres,
    required this.averageBalance,
    required this.harmony,
  });

  factory LifeWheelBalance.initial() {
    // –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤—Å–µ –ø–æ 50
    final spheres = LifeSphere.values
        .map((sphere) => LifeSphereData(sphere: sphere, value: 50))
        .toList();

    return LifeWheelBalance(
      spheres: spheres,
      averageBalance: 50.0,
      harmony: 1.0, // –∏–¥–µ–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
    );
  }

  factory LifeWheelBalance.fromMockData() {
    // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    final spheres = [
      LifeSphereData(sphere: LifeSphere.career, value: 72, change: 5.0),
      LifeSphereData(
          sphere: LifeSphere.relationships, value: 58, change: -2.0),
      LifeSphereData(sphere: LifeSphere.finance, value: 65, change: 8.0),
      LifeSphereData(sphere: LifeSphere.health, value: 45, change: 0.0),
      LifeSphereData(sphere: LifeSphere.creativity, value: 38, change: -5.0),
      LifeSphereData(sphere: LifeSphere.development, value: 68, change: 12.0),
      LifeSphereData(sphere: LifeSphere.social, value: 55, change: 3.0),
      LifeSphereData(sphere: LifeSphere.spirituality, value: 42, change: 1.0),
    ];

    final average = spheres.map((s) => s.value).reduce((a, b) => a + b) / 8;
    final maxValue = spheres.map((s) => s.value).reduce((a, b) => a > b ? a : b);
    final minValue = spheres.map((s) => s.value).reduce((a, b) => a < b ? a : b);
    final harmony = 1 - ((maxValue - minValue) / 100);

    return LifeWheelBalance(
      spheres: spheres,
      averageBalance: average,
      harmony: harmony,
    );
  }
}
